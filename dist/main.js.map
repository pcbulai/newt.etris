{"version":3,"file":"main.js","mappings":"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","sources":["webpack://tetris/./src/config/constants.ts","webpack://tetris/./src/config/enums.ts","webpack://tetris/./src/config/shapes.ts","webpack://tetris/./src/utils/rng.ts","webpack://tetris/./src/utils/matrixOperations.ts","webpack://tetris/./src/utils/selectors.ts","webpack://tetris/./src/utils/tetrominoPool.ts","webpack://tetris/./src/store/helpers/game.helpers.ts","webpack://tetris/./src/store/helpers/movement.helpers.ts","webpack://tetris/./src/store/helpers/rotation.helpers.ts","webpack://tetris/./src/store/reducers.ts","webpack://tetris/./src/store/store.ts","webpack://tetris/./src/view/view.ts","webpack://tetris/./src/view/canvas.ts","webpack://tetris/./src/events/global.events.ts","webpack://tetris/./src/events/touch.events.ts","webpack://tetris/./src/events/keyboard.events.ts","webpack://tetris/./src/view/game.ts","webpack://tetris/./src/main.ts"],"sourcesContent":["// Colors\nexport const COLORS = {\n    orange: \"#FF9D00\",\n    red: \"#FF0000\",\n    green: \"#29BB00\",\n    yellow: \"#FFFB00\",\n    purple: \"#9B0089\",\n    lightGrey: \"#fcfcfc\",\n    grey: \"#f0f0f0\",\n    black: \"#000\",\n};\n// Grid size\nexport const GRID_SIZE = {\n    width: 10,\n    height: 20,\n    unit: 32,\n};\n// Other constants\nexport const TICK_RATE_BASE = 1.5;\nexport const TICK_RATE_MULTIPLIER = 0.25;\n","export var ActionsEnum;\n(function (ActionsEnum) {\n    ActionsEnum[ActionsEnum[\"TICK\"] = 0] = \"TICK\";\n    ActionsEnum[ActionsEnum[\"MOVE_DOWN\"] = 1] = \"MOVE_DOWN\";\n    ActionsEnum[ActionsEnum[\"MOVE_RIGHT\"] = 2] = \"MOVE_RIGHT\";\n    ActionsEnum[ActionsEnum[\"MOVE_LEFT\"] = 3] = \"MOVE_LEFT\";\n    ActionsEnum[ActionsEnum[\"ROTATE_RIGHT\"] = 4] = \"ROTATE_RIGHT\";\n    ActionsEnum[ActionsEnum[\"ROTATE_LEFT\"] = 5] = \"ROTATE_LEFT\";\n    ActionsEnum[ActionsEnum[\"PLAY_PAUSE\"] = 6] = \"PLAY_PAUSE\";\n    ActionsEnum[ActionsEnum[\"BOOSTER_ENGAGED\"] = 7] = \"BOOSTER_ENGAGED\";\n})(ActionsEnum || (ActionsEnum = {}));\n","export const tetrominoes = [\n    {\n        matrix: [\n            [\"1\", null, null],\n            [\"1\", null, null],\n            [\"1\", \"1\", null],\n        ],\n        color: \"orange\",\n    },\n    {\n        matrix: [[\"1\", \"1\", \"1\", \"1\"]],\n        color: \"red\",\n    },\n    {\n        matrix: [\n            [\"1\", null, null],\n            [\"1\", \"1\", null],\n            [null, \"1\", null],\n        ],\n        color: \"green\",\n    },\n    {\n        matrix: [\n            [\"1\", \"1\"],\n            [\"1\", \"1\"],\n        ],\n        color: \"yellow\",\n    },\n    {\n        matrix: [\n            [\"1\", \"1\", \"1\"],\n            [null, \"1\", null],\n        ],\n        color: \"purple\",\n    },\n];\n","export function cryptoRandomInt(max = 1) {\n    const array = new Uint32Array(1);\n    window.crypto.getRandomValues(array);\n    return array[0] % max;\n}\n","import { cryptoRandomInt } from \"./rng\";\nexport function createMatrix(width, height) {\n    return new Array(height).fill(null).map(() => {\n        return new Array(width).fill(null);\n    });\n}\nexport function getMatrixBounds(matrix) {\n    let xMin = matrix[0].length;\n    let xMax = 0;\n    let yMin = matrix.length;\n    let yMax = 0;\n    matrix.forEach((row, y) => {\n        row.forEach((cell, x) => {\n            if (!cell) {\n                return;\n            }\n            if (x < xMin) {\n                xMin = x;\n            }\n            else if (x > xMax) {\n                xMax = x;\n            }\n            if (y < yMin) {\n                yMin = y;\n            }\n            else if (y > yMax) {\n                yMax = y;\n            }\n        });\n    });\n    return [\n        [xMin, yMin],\n        [xMax, yMax],\n    ];\n}\nexport function nextFrame(hz) {\n    return new Promise((resolve) => setTimeout(resolve, 1000 / hz));\n}\nexport function pipe(arg, ...fns) {\n    return fns.reduce((v, f) => f(v), arg);\n}\nexport function getRandomTetromino(array) {\n    return array[cryptoRandomInt(array.length)];\n}\nexport function setTetrominoRotation(matrix) {\n    return pipe(matrix, ...new Array(Math.floor(cryptoRandomInt(3))).fill(rotateTetrominoRight));\n}\nexport function rotateTetrominoRight(matrix) {\n    return matrix[0].map((_col, colIndex) => matrix.map((row) => row[colIndex]).reverse());\n}\nexport function rotateTetrominoLeft(matrix) {\n    return matrix[0]\n        .map((_col, colIndex) => matrix.map((row) => row[colIndex]))\n        .reverse();\n}\nexport function shrinkWrapShape(shape) {\n    const [[xMin, yMin], [xMax, yMax]] = getMatrixBounds(shape.matrix);\n    return Object.assign(Object.assign({}, shape), { x: shape.x + xMin, y: shape.y + yMin, matrix: shape.matrix.slice(yMin, yMax + 1).map((row) => {\n            return row.slice(xMin, xMax + 1);\n        }) });\n}\nexport function clearConnectedCells(matrix, x, y) {\n    var _a;\n    const color = (_a = matrix[y]) === null || _a === void 0 ? void 0 : _a[x];\n    if (!color || !matrix) {\n        return matrix;\n    }\n    const stack = [[x, y]];\n    const visited = new Set();\n    while (stack.length > 0) {\n        const [cx, cy] = stack.pop();\n        const key = `${cx},${cy}`;\n        if (visited.has(key))\n            continue;\n        visited.add(key);\n        if (matrix[cy] && matrix[cy][cx] === color) {\n            matrix[cy][cx] = null;\n            stack.push([cx + 1, cy]);\n            stack.push([cx - 1, cy]);\n            stack.push([cx, cy + 1]);\n            stack.push([cx, cy - 1]);\n        }\n    }\n    return shiftTetrominoesDown(matrix);\n}\nexport function shiftTetrominoesDown(matrix) {\n    const width = matrix[0].length;\n    const height = matrix.length;\n    for (let x = 0; x < width; x++) {\n        for (let y = height - 1; y >= 0; y--) {\n            if (matrix[y][x] === null) {\n                let k = y - 1;\n                while (k >= 0 && matrix[k][x] === null) {\n                    k--;\n                }\n                if (k >= 0) {\n                    matrix[y][x] = matrix[k][x];\n                    matrix[k][x] = null;\n                }\n            }\n        }\n    }\n    return matrix;\n}\n","import { TICK_RATE_BASE, TICK_RATE_MULTIPLIER } from \"../config/index\";\nimport { shrinkWrapShape } from \"./matrixOperations\";\nexport function hasCollision({ activeTetromino, matrix, stageWidth, stageHeight, }) {\n    if (activeTetromino == null) {\n        return false;\n    }\n    const shape = shrinkWrapShape(activeTetromino);\n    const shapeLeft = shape.x;\n    const shapeWidth = shape.matrix[0].length;\n    const shapeRight = shapeLeft + shapeWidth;\n    const shapeTop = shape.y;\n    const shapeHeight = shape.matrix.length;\n    const shapeBottom = shapeTop + shapeHeight;\n    return (shapeLeft < 0 ||\n        shapeRight > stageWidth ||\n        shapeBottom > stageHeight ||\n        shape.matrix.some((row, y) => {\n            return row.some((cell, x) => {\n                var _a;\n                return cell && ((_a = matrix[shapeTop + y]) === null || _a === void 0 ? void 0 : _a[shapeLeft + x]);\n            });\n        }));\n}\nexport function isTopOut({ activeTetromino }) {\n    return shrinkWrapShape(activeTetromino).y < 0;\n}\nexport function tickRate({ score }) {\n    return Math.floor(TICK_RATE_MULTIPLIER * score) + TICK_RATE_BASE;\n}\n","export class TetrominoPool {\n    constructor(createFn, initialSize = 10) {\n        this.pool = [];\n        this.createFn = createFn;\n        for (let i = 0; i < initialSize; i++) {\n            this.pool.push(this.createFn());\n        }\n    }\n    acquire() {\n        return this.pool.length > 0 ? this.pool.pop() : this.createFn();\n    }\n    release(obj) {\n        this.pool.push(obj);\n    }\n}\n","import { COLORS, tetrominoes } from \"../../config/index\";\nimport { createMatrix, getMatrixBounds, getRandomTetromino, setTetrominoRotation, } from \"../../utils/index\";\nexport function spawn(state, tilePool) {\n    const { activeTetromino: prevActiveTetromino, matrix, stageWidth, stageHeight, } = state;\n    const tetromino = getRandomTetromino(tetrominoes);\n    const activeTetrominoMatrix = setTetrominoRotation(tetromino.matrix);\n    const [[xMin], [xMax, yMax]] = getMatrixBounds(activeTetrominoMatrix);\n    const width = xMax - xMin + 1;\n    const activeTetromino = tilePool.acquire();\n    activeTetromino.x = Math.floor(stageWidth / 2 - width / 2) - xMin;\n    activeTetromino.y = -yMax - 1;\n    activeTetromino.fill = COLORS[tetromino.color];\n    activeTetromino.matrix = activeTetrominoMatrix;\n    if (prevActiveTetromino) {\n        tilePool.release(prevActiveTetromino);\n    }\n    return Object.assign(Object.assign({}, state), { activeTetromino, matrix: prevActiveTetromino == null\n            ? matrix\n            : createMatrix(stageWidth, stageHeight).map((row, y) => row.map((_cell, x) => {\n                var _a, _b;\n                const localX = x - prevActiveTetromino.x;\n                const localY = y - prevActiveTetromino.y;\n                return ((_a = prevActiveTetromino.matrix[localY]) === null || _a === void 0 ? void 0 : _a[localX])\n                    ? prevActiveTetromino.fill\n                    : (_b = matrix[y][x]) !== null && _b !== void 0 ? _b : null;\n            })) });\n}\nexport function clearFullRows(state) {\n    const { matrix, stageWidth, stageHeight } = state;\n    const clearedMatrix = matrix.filter((row) => !row.every(Boolean)).reverse();\n    const clearedRows = matrix.length - clearedMatrix.length;\n    const score = state.score + clearedRows;\n    return Object.assign(Object.assign({}, state), { score, matrix: createMatrix(stageWidth, stageHeight)\n            .map((row, y) => row.map((_cell, x) => { var _a, _b; return (_b = (_a = clearedMatrix[y]) === null || _a === void 0 ? void 0 : _a[x]) !== null && _b !== void 0 ? _b : null; }))\n            .reverse() });\n}\nexport function endGame(state) {\n    return Object.assign(Object.assign({}, state), { isGameOver: true });\n}\n","export function moveDown(state) {\n    return state.activeTetromino == null\n        ? state\n        : Object.assign(Object.assign({}, state), { activeTetromino: Object.assign(Object.assign({}, state.activeTetromino), { y: state.activeTetromino.y + 1 }) });\n}\nexport function moveRight(state) {\n    return state.activeTetromino == null\n        ? state\n        : Object.assign(Object.assign({}, state), { activeTetromino: Object.assign(Object.assign({}, state.activeTetromino), { x: state.activeTetromino.x + 1 }) });\n}\nexport function moveLeft(state) {\n    return state.activeTetromino == null\n        ? state\n        : Object.assign(Object.assign({}, state), { activeTetromino: Object.assign(Object.assign({}, state.activeTetromino), { x: state.activeTetromino.x - 1 }) });\n}\n","import { rotateTetrominoLeft, rotateTetrominoRight } from \"../../utils/index\";\nexport function rotateRight(state) {\n    return state.activeTetromino == null\n        ? state\n        : Object.assign(Object.assign({}, state), { activeTetromino: Object.assign(Object.assign({}, state.activeTetromino), { matrix: rotateTetrominoRight(state.activeTetromino.matrix) }) });\n}\nexport function rotateLeft(state) {\n    return state.activeTetromino == null\n        ? state\n        : Object.assign(Object.assign({}, state), { activeTetromino: Object.assign(Object.assign({}, state.activeTetromino), { matrix: rotateTetrominoLeft(state.activeTetromino.matrix) }) });\n}\n","import { ActionsEnum } from \"../config/index\";\nimport { clearConnectedCells, hasCollision, isTopOut, pipe, } from \"../utils/index\";\nimport { clearFullRows, endGame, moveDown, moveLeft, moveRight, rotateLeft, rotateRight, spawn, } from \"./helpers/index\";\nexport const initialState = {\n    stageWidth: 0,\n    stageHeight: 0,\n    activeTetromino: null,\n    matrix: [],\n    score: 0,\n    booster: 0,\n    isGamePaused: false,\n    isGameOver: false,\n    clickCoords: null,\n};\nexport const rootReducer = (state = initialState, action, tilePool) => {\n    switch (action.type) {\n        case ActionsEnum.TICK:\n        case ActionsEnum.MOVE_DOWN:\n            return state.activeTetromino == null\n                ? spawn(state, tilePool)\n                : (() => {\n                    const newState = moveDown(state);\n                    return hasCollision(newState)\n                        ? isTopOut(state)\n                            ? endGame(state)\n                            : spawn(state, tilePool)\n                        : clearFullRows(newState);\n                })();\n        case ActionsEnum.MOVE_RIGHT:\n            return hasCollision(pipe(state, moveRight)) ? state : moveRight(state);\n        case ActionsEnum.MOVE_LEFT:\n            return hasCollision(pipe(state, moveLeft)) ? state : moveLeft(state);\n        case ActionsEnum.ROTATE_RIGHT:\n            return hasCollision(pipe(state, rotateRight))\n                ? state\n                : rotateRight(state);\n        case ActionsEnum.ROTATE_LEFT:\n            return hasCollision(pipe(state, rotateLeft)) ? state : rotateLeft(state);\n        case ActionsEnum.PLAY_PAUSE:\n            return Object.assign(Object.assign({}, state), { isGamePaused: !state.isGamePaused });\n        case ActionsEnum.BOOSTER_ENGAGED:\n            const { matrix, booster } = state;\n            if (!action.payload || booster === 0) {\n                return state;\n            }\n            const { x, y } = action.payload;\n            const updatedMatrix = clearConnectedCells(matrix, x, y);\n            return Object.assign(Object.assign({}, state), { matrix: updatedMatrix, booster: booster - 1 });\n        default:\n            return state;\n    }\n};\n","import { createMatrix, TetrominoPool } from \"../utils/index\";\nimport { initialState, rootReducer } from \"./reducers\";\nexport class Store {\n    constructor(stageWidth, stageHeight) {\n        this.subscribers = new Set();\n        this.state = Object.assign(Object.assign({}, initialState), { stageWidth,\n            stageHeight, matrix: createMatrix(stageWidth, stageHeight) });\n        this.tilePool = new TetrominoPool(() => ({\n            x: 0,\n            y: 0,\n            matrix: [],\n            fill: \"\",\n        }));\n    }\n    getState() {\n        return this.state;\n    }\n    dispatch(event) {\n        const newState = rootReducer(this.state, event, this.tilePool);\n        if (newState !== this.state) {\n            this.state = newState;\n            this.subscribers.forEach((subscriber) => subscriber(this.state));\n        }\n    }\n    subscribe(subscriber) {\n        this.subscribers.add(subscriber);\n        subscriber(this.state);\n        return () => this.subscribers.delete(subscriber);\n    }\n}\n","import { bindGlobalEvents, bindKeyboardEvents, bindTouchEvents, } from \"../events/index\";\nimport { canvasInit } from \"./canvas\";\nexport function viewInit({ bufferWidth, bufferHeight, unit, store, }) {\n    const canvas = document.querySelector(\".game canvas\");\n    if (!canvas) {\n        console.error(\"Canvas element not found\");\n        return;\n    }\n    canvas.width = bufferWidth;\n    canvas.height = bufferHeight;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n        console.error(\"Failed to get 2D context\");\n        return;\n    }\n    const game = canvasInit({ ctx, bufferWidth, bufferHeight, unit });\n    const gameScore = document.querySelector(\".game-score span\");\n    const gameBooster = document.querySelector(\".game-booster span\");\n    const gameOver = document.querySelector(\".game-over\");\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    store.subscribe((state) => {\n        const { score, booster, isGameOver } = state;\n        if (!gameScore || !gameBooster || !gameOver) {\n            return;\n        }\n        gameScore.textContent = `${score}`;\n        gameBooster.textContent = `${booster}`;\n        if (isGameOver) {\n            gameOver.classList.add(\"visible\");\n            gameOver.classList.remove(\"hidden\");\n        }\n        else {\n            gameOver.classList.add(\"hidden\");\n            gameOver.classList.remove(\"visible\");\n        }\n    });\n    bindGlobalEvents(ctx.canvas, store);\n    if (isMobile) {\n        bindTouchEvents(store);\n    }\n    else {\n        bindKeyboardEvents(store);\n    }\n    return game;\n}\n","import { COLORS } from \"../config/index\";\nexport function canvasInit({ ctx, bufferWidth, bufferHeight, unit, }) {\n    const canvasCell = (x, y, fill) => {\n        const left = x * unit;\n        const top = y * unit;\n        ctx.fillStyle = fill;\n        ctx.fillRect(left, top, unit, unit);\n        ctx.strokeStyle = COLORS.black;\n        ctx.lineWidth = 1;\n        ctx.strokeRect(left, top, unit, unit);\n    };\n    const drawBackground = () => {\n        ctx.fillStyle = COLORS.lightGrey;\n        ctx.fillRect(0, 0, bufferWidth, bufferHeight);\n        ctx.strokeStyle = COLORS.grey;\n        ctx.lineWidth = 0.5;\n        for (let x = 0; x < bufferWidth; x += unit) {\n            for (let y = 0; y < bufferHeight; y += unit) {\n                ctx.strokeRect(x, y, unit, unit);\n            }\n        }\n    };\n    return (state) => {\n        var _a;\n        drawBackground();\n        (_a = state.activeTetromino) === null || _a === void 0 ? void 0 : _a.matrix.forEach((row, y) => {\n            row.forEach((cell, x) => {\n                if (cell && state.activeTetromino) {\n                    const xGlobal = state.activeTetromino.x + x;\n                    const yGlobal = state.activeTetromino.y + y;\n                    canvasCell(xGlobal, yGlobal, state.activeTetromino.fill);\n                }\n            });\n        });\n        state.matrix.forEach((row, y) => {\n            row.forEach((cell, x) => {\n                if (cell) {\n                    canvasCell(x, y, cell);\n                }\n            });\n        });\n    };\n}\n","import { ActionsEnum, GRID_SIZE } from \"../config/index\";\nimport { initGame } from \"../view/game\";\nexport function bindGlobalEvents(canvas, store) {\n    const pauseButton = document.querySelector(\".game-pause\");\n    const restartButton = document.querySelector(\".game-restart\");\n    canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener(\"click\", (event) => {\n        const rect = canvas.getBoundingClientRect();\n        const x = Math.floor((event.clientX - rect.left) / GRID_SIZE.unit);\n        const y = Math.floor((event.clientY - rect.top) / GRID_SIZE.unit);\n        store.dispatch({\n            type: ActionsEnum.BOOSTER_ENGAGED,\n            payload: { x, y },\n        });\n    });\n    pauseButton === null || pauseButton === void 0 ? void 0 : pauseButton.addEventListener(\"click\", () => {\n        store.dispatch({ type: ActionsEnum.PLAY_PAUSE });\n    });\n    restartButton === null || restartButton === void 0 ? void 0 : restartButton.addEventListener(\"click\", () => {\n        initGame({\n            width: GRID_SIZE.width,\n            height: GRID_SIZE.height,\n            resolution: GRID_SIZE.unit,\n        });\n    });\n}\n","import { ActionsEnum } from \"../config/index\";\nexport function bindTouchEvents(store) {\n    let touchStartX = 0;\n    let touchStartY = 0;\n    let touchEndX = 0;\n    let touchEndY = 0;\n    const handleSwipes = () => {\n        const deltaX = touchEndX - touchStartX;\n        const deltaY = touchEndY - touchStartY;\n        if (Math.abs(deltaX) > Math.abs(deltaY)) {\n            store.dispatch({\n                type: deltaX > 0 ? ActionsEnum.MOVE_RIGHT : ActionsEnum.MOVE_LEFT,\n            });\n        }\n        else if (deltaY > 0) {\n            store.dispatch({ type: ActionsEnum.MOVE_DOWN });\n        }\n    };\n    document === null || document === void 0 ? void 0 : document.addEventListener(\"touchstart\", (event) => {\n        touchStartX = event.changedTouches[0].screenX;\n        touchStartY = event.changedTouches[0].screenY;\n    });\n    document === null || document === void 0 ? void 0 : document.addEventListener(\"touchend\", (event) => {\n        touchEndX = event.changedTouches[0].screenX;\n        touchEndY = event.changedTouches[0].screenY;\n        handleSwipes();\n    });\n}\n","import { ActionsEnum } from \"../config/index\";\nexport function bindKeyboardEvents(store) {\n    document.addEventListener(\"keydown\", (keyboardEvent) => {\n        switch (keyboardEvent.key) {\n            case \"s\":\n                store.dispatch({ type: ActionsEnum.MOVE_DOWN });\n                break;\n            case \"d\":\n                store.dispatch({ type: ActionsEnum.MOVE_RIGHT });\n                break;\n            case \"a\":\n                store.dispatch({ type: ActionsEnum.MOVE_LEFT });\n                break;\n            case \"ArrowRight\":\n                store.dispatch({ type: ActionsEnum.ROTATE_RIGHT });\n                break;\n            case \"ArrowLeft\":\n                store.dispatch({ type: ActionsEnum.ROTATE_LEFT });\n                break;\n        }\n    });\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ActionsEnum } from \"../config/index\";\nimport { Store } from \"../store/index\";\nimport { nextFrame, tickRate } from \"../utils/index\";\nimport { viewInit } from \"./view\";\nexport function initGame({ width, height, resolution, }) {\n    const stageWidth = Math.max(4, Math.ceil(width));\n    const stageHeight = Math.max(4, Math.ceil(height));\n    const unit = Math.ceil(resolution);\n    const bufferWidth = stageWidth * unit;\n    const bufferHeight = stageHeight * unit;\n    const store = new Store(stageWidth, stageHeight);\n    const render = viewInit({\n        bufferWidth,\n        bufferHeight,\n        unit,\n        store,\n    });\n    if (render) {\n        store.subscribe(render);\n    }\n    startLoop(store);\n}\nfunction startLoop(store) {\n    return __awaiter(this, void 0, void 0, function* () {\n        function gameLoop() {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (store.getState().isGameOver) {\n                    return;\n                }\n                if (!store.getState().isGamePaused) {\n                    store.dispatch({ type: ActionsEnum.TICK });\n                }\n                yield nextFrame(tickRate(store.getState()));\n                requestAnimationFrame(gameLoop);\n            });\n        }\n        requestAnimationFrame(gameLoop);\n    });\n}\n","import { GRID_SIZE } from \"./config/index\";\nimport { initGame } from \"./view/index\";\ninitGame({\n    width: GRID_SIZE.width,\n    height: GRID_SIZE.height,\n    resolution: GRID_SIZE.unit,\n});\n"],"names":["COLORS","orange","red","green","yellow","purple","lightGrey","grey","black","ActionsEnum","tetrominoes","matrix","color","cryptoRandomInt","max","array","Uint32Array","window","crypto","getRandomValues","createMatrix","width","height","Array","fill","map","getMatrixBounds","xMin","length","xMax","yMin","yMax","forEach","row","y","cell","x","pipe","arg","fns","reduce","v","f","rotateTetrominoRight","_col","colIndex","reverse","shrinkWrapShape","shape","Object","assign","slice","hasCollision","activeTetromino","stageWidth","stageHeight","shapeLeft","shapeWidth","shapeRight","shapeTop","shapeHeight","some","_a","TetrominoPool","constructor","createFn","initialSize","this","pool","i","push","acquire","pop","release","obj","spawn","state","tilePool","prevActiveTetromino","tetromino","activeTetrominoMatrix","Math","floor","setTetrominoRotation","_cell","_b","localX","localY","moveRight","moveLeft","rotateRight","rotateLeft","initialState","score","booster","isGamePaused","isGameOver","clickCoords","Store","subscribers","Set","getState","dispatch","event","newState","action","type","TICK","MOVE_DOWN","moveDown","isTopOut","endGame","clearedMatrix","filter","every","Boolean","clearedRows","clearFullRows","MOVE_RIGHT","MOVE_LEFT","ROTATE_RIGHT","ROTATE_LEFT","PLAY_PAUSE","BOOSTER_ENGAGED","payload","updatedMatrix","stack","visited","cx","cy","key","has","add","k","shiftTetrominoesDown","clearConnectedCells","rootReducer","subscriber","subscribe","delete","viewInit","bufferWidth","bufferHeight","unit","store","canvas","document","querySelector","console","error","ctx","getContext","game","canvasCell","left","top","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","drawBackground","xGlobal","yGlobal","canvasInit","gameScore","gameBooster","gameOver","isMobile","test","navigator","userAgent","textContent","classList","remove","pauseButton","restartButton","addEventListener","rect","getBoundingClientRect","clientX","clientY","initGame","resolution","bindGlobalEvents","touchStartX","touchStartY","touchEndX","touchEndY","changedTouches","screenX","screenY","deltaX","deltaY","abs","handleSwipes","bindTouchEvents","keyboardEvent","bindKeyboardEvents","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","ceil","render","requestAnimationFrame","gameLoop","hz","tickRate","setTimeout","startLoop"],"sourceRoot":""}